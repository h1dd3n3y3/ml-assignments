--------------------------------------------- Περιεχόμενα αρχείου txt -----------------------------------------------------
Μάθημα: Υπολογιστική Νοημοσύνη και Μηχανική Μάθηση

Α/Α Ομάδας: 50

Μέλη Ομάδας: Δαυίδ Παναγιώτης Παραθυράς, Δημοσθένης Κράλλης, Δημήτρης Κόκκαλης.

Ομάδα Θεμάτων: 2η

Συνεισφορά Μελών Ομάδας: Ερώτημα Α -> Δαυίδ Παναγιώτης Παραθυράς, Ερώτημα Β -> Δημοσθένης Κράλλης, Ερώτημα Γ -> Δημήτρης Κόκκαλης.
1ο Μέλος: Δαυίδ Παναγιώτης Παραθυράς
2ο Μέλος: Δημοσθένης Κράλλης
3ο Μέλος: Δημήτρης Κόκκαλης
------------
Ερώτημα Α.
Σύντομη Περιγραφή:  Πρόβλεψη τιμών μετοχής με μέθοδο γραμμικής παλινδρόμηση:
		    Το dataset παρέχεται πρόσβαση μέσω API request, με παραμέτρους: κλειδί API, όνομα μετοχής,
		    μέθοδος ανάκτησης (μηνιαία προσαρμοσμένη) και τύπο δεδομένων του. Δηλαδή, γίνεται πρόβλεψη
		    ανάμεσα σε δύο ημερομηνίες σε αντίστοιχες μεταβλητές, βάσει των οποίων γίνεται φιλτράρισμα
		    του dataset για δεδομένα ανάμεσα σε αυτές τις δύο, οι οποίες, μπορούν να αλλάξουν. Το πρόγραμμα
		    ξεκινάει την εκτέλεση του ζητώντας από τον χρήστη να βάλει ημερομηνίες πρόβλεψης στο αντίστοιχο
		    format ημερομηνίας του API, με όλους τους ελέγχους ορθότητάς τους. Προχωρώντας, γίνεται κλήση API
		    και στη συνέχεια φιλτράρισμα για το αρχικό dataset. Η γραμμική παλινδρόμηση γίνεται μεταξύ των τιμών
		    μετοχής από τον μέσο όρο της ψηλότερης τιμής και της χαμηλότερης μέσα στο μήνα (high & low) και τον
		    αριθμό των μηνών. Γίνεται έπειτα ο υπολογισμός των συντελεστών της συνάρτησης γραμμικής παλινδρόμησης
		    και δημιουργείται ένα γράφημα που επιδεικνύει τις τιμές της μετοχής κατά τους μήνες, καθώς και την
		    ευθεία της συνάρτησης που υπολογίστηκε. Αφού κλείσει το παράθυρο της γραφικής απεικόνισης, προχωράει
		    η εκτέλεση προς 2ο φιλτράρισμα με τις ημερομηνίες που έχει βάλει ο χρήστης από το πληκτρολόγιο,
		    δημιουργώντας έτσι ένα "κρυφό" dataset, ακριβώς όπως προηγουμένως, από το οποίο θα υπολογιστεί το
		    σφάλμα μετά την πρόβλεψη. Μετά την πρόβλεψη, γίνεται αναζήτηση ανάμεσα στις λίστες μηνών του παλιού
		    και του καινούργιου dataset, για να γίνει ουσιαστικά συναληθευση τους και έπειτα να γίνει η εκτίμηση
		    σφάλματος για τον κάθε μήνα. Δηλαδή βάση των ημερομηνιών που έχουν εισαχθεί για το καινούργιο dataset,
		    που θέλουμε να γίνει η πρόβλεψη, το πρόγραμμα παίρνει δεδομένα από το ίδιο εύρος που έβαλε ο χρήστης
		    από το πληκτρολόγιο από το αρχικό dataset και έτσι μέσω υπολογισμών θα πάει και θα υπολογίσει με τις
		    παλιές τιμές (αρχικό dataset), τις καινούργιες τις οποίες εμείς ήδη θα κατέχουμε από το API request.
		    Αφού εκτυπωθούν οι τιμές της μετοχής σε πραγματικό χρόνο και οι τιμές που προέκυψαν από την πρόβλεψη,
		    υπολογίζεται και τυπώνεται το σφάλμα πρόβλεψης κάθε μήνα. Τέλος το πρόγραμμα ρωτάει τον χρήστη αν θέλει
		    να τρέξει ξανά το πρόγραμμα. Στο πρόγραμμα γίνεται έλεγχος για την επιτυχή ή μη κλίση του API, καθώς
		    και προηγουμένως υπάρχουν τρεις συναρτήσεις όπου η πρώτη είναι για τον υπολογισμό των συντελεστών
		    γραμμικής παλινδρόμησης, η δεύτερη για την δημιουργία γραφικής παράστασης και η τρίτη για τον υπολογισμό
		    της μετοχής, δεδομένου αριθμού μήνα. Σημειώνεται ότι δεν παρέχεται από το ίδιο το API δυνατότητα εισαγωγής
		    χώρας σαν όρισμα.
Dataset:    Απευθείας σύνδεσμος λήψης csv: https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=AAPL&apikey=AFG1UCT1UGMCYXJ8&datatype=csv
	    Αναφορά χρήσης monthly adjusted time series του API: https://www.alphavantage.co/documentation/#monthlyadj
Κώδικας:

# Run result for given dates:
"""
Dataset dates: 2020-01-01 - 2021-01-01
Enter a prediction starting date > '2021-01-01' (in YYYY-MM-DD format): 2021-03-01
Enter a prediction ending date > '2021-03-01' (in YYYY-MM-DD format): 2022-03-01


Filtered 12/281 total 'AAPL' stock data between 2020-01-01 - 2021-01-01.

[{'timestamp': '2020-01-31', 'open': '296.2400', 'high': '327.8500', 'low': '292.7500', 'close': '309.5100', 'adjusted close': '75.6888', 'volume': '734044103', 'dividend amount': '0.0000'}, {'timestamp': '2020-02-28', 'open': 
'304.3000', 'high': '327.2200', 'low': '256.3700', 'close': '273.3600', 'adjusted close': '67.0094', 'volume': '755223231', 'dividend amount': '0.7700'}, {'timestamp': '2020-03-31', 'open': '282.2800', 'high': '304.0000', 'low': '212.6100', 'close': '254.2900', 'adjusted close': '62.3347', 'volume': '1570331732', 'dividend amount': '0.0000'}, {'timestamp': '2020-04-30', 'open': '246.5000', 'high': '294.5300', 'low': '236.9000', 'close': '293.8000', 'adjusted close': '72.0199', 'volume': '816530808', 'dividend amount': '0.0000'}, {'timestamp': '2020-05-29', 'open': '286.2500', 'high': '324.2400', 'low': '285.8500', 'close': '317.9400', 'adjusted close': '78.1435', 'volume': '701660022', 'dividend amount': '0.8200'}, {'timestamp': '2020-06-30', 'open': '317.7500', 'high': '372.3800', 'low': '317.2100', 'close': '364.8000', 'adjusted close': '89.6608', 'volume': '810900890', 'dividend amount': '0.0000'}, {'timestamp': '2020-07-31', 'open': '365.1200', 'high': '425.6600', 'low': '356.5800', 'close': '425.0400', 'adjusted close': '104.4666', 'volume': '755162226', 'dividend amount': '0.0000'}, {'timestamp': '2020-08-31', 'open': '432.8000', 'high': '515.1400', 'low': '126.0000', 'close': '129.0400', 'adjusted close': '127.0962', 'volume': '1184207050', 'dividend amount': '0.8200'}, {'timestamp': '2020-09-30', 'open': '132.7600', 'high': '137.9800', 'low': '103.1000', 'close': '115.8100', 'adjusted close': '114.0655', 'volume': '3886793083', 'dividend amount': '0.0000'}, {'timestamp': '2020-10-30', 'open': '117.6400', 'high': '125.3900', 'low': '107.7200', 'close': '108.8600', 'adjusted close': '107.2201', 'volume': '2895317580', 'dividend amount': '0.0000'}, {'timestamp': '2020-11-30', 'open': '109.1100', 'high': '121.9900', 'low': '107.3200', 'close': '119.0500', 'adjusted close': '117.4592', 'volume': '2122724412', 'dividend amount': '0.2050'}, {'timestamp': '2020-12-31', 'open': '121.0100', 'high': '138.7890', 'low': '120.0100', 'close': '132.6900', 'adjusted close': '130.9169', 'volume': '2319687808', 'dividend amount': '0.0000'}]


Filtered 12/281 total 'AAPL' stock data between 2021-03-01 - 2022-03-01:

[{'timestamp': '2021-03-31', 'open': '123.7500', 'high': '128.7200', 'low': '116.2100', 'close': '122.1500', 'adjusted close': '120.6984', 'volume': '2650845211', 'dividend amount': '0.0000'}, {'timestamp': '2021-04-30', 'open': '123.6600', 'high': '137.0700', 'low': '122.4900', 'close': '131.4600', 'adjusted close': '129.8978', 'volume': '1889956694', 'dividend amount': '0.0000'}, {'timestamp': '2021-05-28', 'open': '132.0400', 'high': '134.0700', 'low': '122.2500', 'close': '124.6100', 'adjusted close': '123.3372', 'volume': '1711935110', 'dividend amount': '0.2200'}, {'timestamp': '2021-06-30', 'open': '125.0800', 'high': '137.4100', 'low': '123.1300', 'close': '136.9600', 'adjusted close': '135.5611', 'volume': '1606114354', 'dividend amount': '0.0000'}, {'timestamp': '2021-07-30', 'open': '136.6000', 'high': '150.0000', 'low': '135.7600', 'close': '145.8600', 'adjusted close': '144.3701', 'volume': '1916751489', 'dividend amount': '0.0000'}, {'timestamp': '2021-08-31', 'open': '146.3600', 'high': '153.4900', 'low': '144.5000', 'close': '151.8300', 'adjusted close': '150.5054', 'volume': '1462773381', 'dividend amount': '0.2200'}, {'timestamp': '2021-09-30', 'open': '152.8300', 'high': '157.2600', 'low': '141.2700', 'close': '141.5000', 'adjusted close': '140.2655', 'volume': '1797948421', 'dividend amount': '0.0000'}, {'timestamp': '2021-10-29', 'open': '141.9000', 'high': '153.1650', 'low': '138.2700', 'close': '149.8000', 'adjusted close': '148.4931', 'volume': '1565079040', 'dividend amount': '0.0000'}, {'timestamp': '2021-11-30', 'open': '148.9850', 'high': '165.7000', 'low': '147.4800', 'close': '165.3000', 'adjusted close': '164.0962', 'volume': '1688864233', 'dividend amount': '0.2200'}, {'timestamp': '2021-12-31', 'open': '167.4800', 'high': '182.1300', 'low': '157.8000', 
'close': '177.5700', 'adjusted close': '176.2768', 'volume': '2443227128', 'dividend amount': '0.0000'}, {'timestamp': '2022-01-31', 'open': '177.8300', 'high': '182.9400', 'low': '154.7000', 'close': '174.7800', 'adjusted close': '173.5071', 'volume': '2106513962', 'dividend amount': '0.0000'}, {'timestamp': '2022-02-28', 'open': '174.0100', 'high': '176.6500', 'low': '152.0000', 'close': '165.1200', 'adjusted close': '164.1267', 'volume': '1628570227', 'dividend amount': '0.2200'}]


Real time stock values: [186.82, 198.31, 195.19, 198.97, 217.88, 225.74, 227.89, 222.3, 239.44, 261.03, 260.29, 252.65]
Predicted stock values: [568.71, 541.17, 513.63, 486.09, 458.55, 431.01, 403.47, 375.93, 348.39, 320.85, 293.31, 265.77]


Prediction error for 2021-03-31: |186.82 - 568.71| = 381.89
Prediction error for 2021-04-30: |198.31 - 541.17| = 342.86
Prediction error for 2021-05-28: |195.19 - 513.63| = 318.44
Prediction error for 2021-06-30: |198.97 - 486.09| = 287.12
Prediction error for 2021-07-30: |217.88 - 458.55| = 240.67
Prediction error for 2021-08-31: |225.74 - 431.01| = 205.27
Prediction error for 2021-09-30: |227.89 - 403.47| = 175.58
Prediction error for 2021-10-29: |222.3 - 375.93| = 153.63
Prediction error for 2021-11-30: |239.44 - 348.39| = 108.95
Prediction error for 2021-12-31: |261.03 - 320.85| = 59.82
Prediction error for 2022-01-31: |260.29 - 293.31| = 33.02
Prediction error for 2022-02-28: |252.65 - 265.77| = 13.12
Continue predictions for new dates? (yes/no): """

import requests, csv, numpy as np, matplotlib.pyplot as plt, os, platform
from datetime import datetime

def calc_regression_coef(x, y):
    n = np.size(x) # Number of observations/points

    # Mean of x and y vectors
    m_x = np.mean(x)
    m_y = np.mean(y)

    # Calculating cross-deviation of y and x and the sum of squared deviations of x
    SS_xy = np.sum(x * y) - n * m_y * m_x
    SS_xx = np.sum(x * x) - n * m_x * m_x

    # Calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x

    return (round(b_0, 2), round(b_1, 2)) # 2 decimal digit limitation

def plot_regression_line(x, y, b):
    plt.scatter(x, y, color="m", marker="o", s=30) # Plotting the actual points as scatter plot
    y_pred = b[0] + b[1] * x # Predicted response vector
    plt.plot(x, y_pred, color="g") # Plotting the regression line

    # Putting labels
    plt.xlabel('Month numeral')
    plt.ylabel(f'{STOCK_NAME} Stock value')

    plt.show() # Show plot

def stock_prediction_formula(b_0, b_1, x_i):
    return round(b_0 + b_1 * x_i, 2) # 2 decimal digit limitation

API_KEY = 'AFG1UCT1UGMCYXJ8' # Alpha Vantage API Key
STOCK_NAME = 'AAPL' # Apple stock name
DATASET_URL = f'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol={STOCK_NAME}&apikey={API_KEY}&datatype=csv' # Alpha Vantage monthly adjusted url

# Desired date limits for the dataset (old data)
date_lower_0 = "2020-01-01" # Starting date
date_upper_0 = "2021-01-01" # Ending date

while 1:
    os.system("cls" if platform.system() == "Windows" else "clear") # Clear terminal content
    print(f"Dataset dates: {date_lower_0} - {date_upper_0}")

    # Desired date limits for future prediction (currently present)
    while 1:
        date_lower_1 = input(f"Enter a prediction starting date > '{date_upper_0}' (in YYYY-MM-DD format): ")

        try:
            datetime.strptime(date_lower_1, "%Y-%m-%d") # Strict API date format
        except ValueError:
            os.system("cls" if platform.system() == "Windows" else "clear") # Clear terminal content
            print("Wrong date format! Please try again:")
            continue

        if date_lower_1 > date_upper_0: # Starting date >= past ending date
            break
        else:
            print(f"Date unacceptable: {date_lower_1} <= {date_upper_0}")
            os.system("cls" if platform.system() == "Windows" else "clear") # Clear terminal content

    while 1:
        date_upper_1 = input(f"Enter a prediction ending date > '{date_lower_1}' (in YYYY-MM-DD format): ")

        try:
            datetime.strptime(date_upper_1, "%Y-%m-%d") # Strict API date format
        except ValueError:
            os.system("cls" if platform.system() == "Windows" else "clear") # Clear terminal content
            print("Wrong date format! Please try again:")
            continue

        if date_upper_1 > date_lower_1: # Ending date > starting date
            break
        else:
            print(f"Date unacceptable: {date_upper_1} <= {date_lower_1}")
            os.system("cls" if platform.system() == "Windows" else "clear") # Clear terminal content

    response = requests.get(DATASET_URL) # API call

    if response.status_code == 200: # Call successful
        content = response.content.decode('utf-8') # Decode API response content
        reader = csv.DictReader(content.splitlines()) # Read decoded csv response content
        data = [row for row in reader] # Save all stock data in a list


        # Setting up the dataset base
        filtered_past_data = [row for row in data if date_lower_0 <= row['timestamp'] <= date_upper_0] # Stock date filtration
        filtered_past_data.reverse() # Reverse alpha vantage api request list (originally returns data from present(or future) to past datetimes)

        print(f"\n\nFiltered {len(filtered_past_data)}/{len(data)} total '{STOCK_NAME}' stock data between {date_lower_0} - {date_upper_0}.", end="\n\n")
        print(filtered_past_data, end="\n\n")

        # Define x and y axis references
        date_past = [data['timestamp'] for data in filtered_past_data]
        month_past = [int(month[5:7]) for month in date_past] # Save month numeral

        # Calculate stock's value using stock's 'high' & 'low' mean
        high_old = [float(data['high']) for data in filtered_past_data]
        low_old = [float(data['low']) for data in filtered_past_data]
        stock_value_old = [round(high_old[i] + low_old[i] / 2, 2) for i in range(len(high_old))] # Keep the 2 decimal digits because pstock_value_oldthon is stupid

        b = calc_regression_coef(np.array(month_past), np.array(stock_value_old)) # Calculate b_0 & b_1 regression coefficients
        plot_regression_line(np.array(month_past), np.array(stock_value_old), b) # Plot regression line


        # Setting up the 'future' dataset reference
        filtered_future_data = [row for row in data if date_lower_1 <= row['timestamp'] <= date_upper_1] # Stock date filtration
        filtered_future_data.reverse() # Reverse alpha vantage api request list (originally returns data from present(or future) to past datetimes)

        print(f"\nFiltered {len(filtered_future_data)}/{len(data)} total '{STOCK_NAME}' stock data between {date_lower_1} - {date_upper_1}:", end="\n\n")
        print(filtered_future_data, end="\n\n")
        
        date_future = [data['timestamp'] for data in filtered_future_data]
        month_future = [int(month[5:7]) for month in date_future] # Save month numeral

        # Calculate stock's value using stock's 'high' & 'low' mean
        high_new = [float(data['high']) for data in filtered_future_data]
        low_new = [float(data['low']) for data in filtered_future_data]
        stock_value_new = [round(high_new[i] + low_new[i] / 2, 2) for i in range(len(high_new))] # Keep the 2 decimal digits because python is stupid
        print("\nReal time stock values:", stock_value_new)

        predicted_stock_values = []
        for m in range(len(month_future)):
            predicted_stock_values.append(stock_prediction_formula(b[0], b[1], m)) # Predict stock values

        print("Predicted stock values:", predicted_stock_values, end="\n\n\n")

        common_months = []
        for month in month_future: # Search for common month numeral between prediction and dataset
            if month in month_past:
                common_months.append(month)

        for j in common_months: # Print error between real and predicted stock value
            print(f'Prediction error for {date_future[common_months.index(j)]}: |{stock_value_new[common_months.index(j)]} - {predicted_stock_values[common_months.index(j)]}| = \
{round(abs(stock_value_new[common_months.index(j)] - predicted_stock_values[common_months.index(j)]), 2)}') # 2 decimal digit limitation
        
        while (ans := input("Continue predictions for new dates? (yes/no): ")) not in ["yes", "no"]:
            print("Wrong input: choose between 'yes' and 'no':")

        if ans == "no": # Exit
            break
    else: # Call unsuccessful
        print(f'Request failed with status code {response.status_code}')

------------
Ερώτημα Β.
Σύντομη Περιγραφή:  Είναι ιεραρχική συσταδοποίηση με 2 συστάδες. Οι συστάδες είναι οργανωμένες με την εξής δομή:
                    Πρώτα γίνεται συσταδοποίηση με K-Means με 2 συστάδες. Μετά γίνεται ξεχωριστή συσταδοποίηση
                    μέσα σε αυτές τις 2 συστάδες για κάθε συνδιασμό των υπολοιπόμενων πεδίων. Πιό συγκεκριμένα,
                    πρώτα γίνεται συσταδοποίηση ηλικίας ταξιδιώτη και διάρκειας ταξιδιού και ύστερα γίνεται στις
                    υπόλοιπες με τα υπολοιπόμενα πεδία. Το dataset δεν έχει κριτικές καθώς δεν υπήρχε κατάλληλο
                    dataset που να έχει και κατάλληλη άδεια για χρήση (πολλά δεν είχαν άδεια και δεν ήταν καλά
                    δομημένα). Η άδεια του dataset είναι στο αρχείο DATASET_LICENSE.txt στο git repository που
                    ανεβάσαμε τον κώδικά μας (https://github.com/wallmenis/ml-assignments/blob/main/ERG2/DATASET_LICENSE.txt).
                    Είναι πειραγμένο από το αρχικό.
Dataset:    Αρχικός σύνδεσμος: https://www.kaggle.com/datasets/rkiattisak/traveler-trip-data
            Σύνδεσμος αρχείου που χρησιμοποιήσαμε: https://github.com/wallmenis/ml-assignments/blob/main/ERG2/source.csv
Κώδικας:

# Παράδειγμα εξόδου μετά εκτέλεσης
"""

Traveler Age/Travel Duration
The centroids of the 2 clusters are:
[42.69230769  7.30769231] [29.3877551  7.7244898]
The radii are:
17.310427134359358 9.39179704467928
And the clusters have 39 and 98 data points out of the 137 total points respectively

----------------------------------------------------------------------------------------

From cluster 1:

Accomodation Cost/Travel Duration
The centroids of the 2 clusters are:
[1139.18918919    7.32432432] [5500.    7.]
The radii are:
1860.811565290628 1500.0
And the clusters have 37 and 2 data points out of the 39 total points respectively

----------------------------------------------------------------------------------------

From cluster 1:

Transportation Cost/Travel Duration
The centroids of the 2 clusters are:
[1733.33333333    7.83333333] [503.78787879   7.21212121]
The radii are:
1860.811565290628 1500.0
And the clusters have 6 and 33 data points out of the 39 total points respectively

----------------------------------------------------------------------------------------

From cluster 2:

Accomodation Cost/Traveler Age
The centroids of the 2 clusters are:
[874.23913043  29.40217391] [6166.66666667   29.16666667]
The radii are:
2125.7609076089725 1833.3346136359164
And the clusters have 92 and 6 data points out of the 98 total points respectively

----------------------------------------------------------------------------------------

From cluster 2:

Transfer Cost/Traveler Age
The centroids of the 2 clusters are:
[514.19354839  29.38709677] [2700.    29.4]
The radii are:
985.8093417454683 300.00426663632635
And the clusters have 93 and 5 data points out of the 98 total points respectively

----------------------------------------------------------------------------------------
"""
# Τα αποτελέσματα μπορεί να είναι διαφορετικά κάθε φορά λόγω των τυχαίων σημείων που επιλέγει ο kmeans

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv
from sklearn.cluster import KMeans

class dataset_attributes:               # Για να κάνουμε την ανάθεση λίγο πιο εύκολη
    Travel_Duration=4
    Traveler_Age=6                      # Τα πεδία που είναι αριθμητικές τιμές είναι μόνο 4.
    Accomodation_Cost=10
    Transportation_Cost=12

def safe_csv_read(csvstring):            #from python docs: https://docs.python.org/3/library/csv.html#examples
    output=[]
    with open(csvstring, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            output.append(row)
    return output

def eucledian_distance(point1,point2):     # Υπάρχει νομίζω μια συνάρτηση στην numpy αλλά έτσι βολεύομαι περισσότερο.
    return np.sqrt(np.sum(np.square(point1 - point2)))

def split_data(data,cluster_centers,labels):    # Με αυτή την συνάρτηση σπάμε τα δεδομένα από το κύριο pool σε μικρότερα pools ανάλογα σε ποιά συστάδα είναι
    output=[]
    for j in range(0, cluster_centers.shape[0]):    # Αρχικοποιούμε την ενδιάμεση λίστα για να έχουμε θέσεις όσες και ο αριθμός των συστάδων
        output.append([])
    k=0
    for i in data:                                  # Βάζουμε τα δεδομένα με βάση τον αριθμό συστάδας από την labels
        output[labels[k]].append(i)
        k=k+1
    return output

def get_cluster_radii(cluster_centers,labels,subset):
    output=np.zeros(cluster_centers.shape[0])               # Αρχηκοποίηση των λιστών. Η έξοδος θα είναι μεγέθους όσων είναι και οι συστάδες
    distances=np.zeros((cluster_centers.shape[0],subset.shape[0]))  # συστάδα επί πλήθος δεδομένων της
    spdat=split_data(subset, cluster_centers, labels)       #Κάνουμε το split
    spdatlen=[]

    for k in range(0,cluster_centers.shape[0]):
        j=0
        for i in spdat[k]:
            j=j+1
        spdatlen.append(j)
    for i in range (0,cluster_centers.shape[0]):
        for j in range(0,spdatlen[i]):
            distances[i][j]=eucledian_distance(spdat[i][j],  cluster_centers[i])    #Έτσι βρίσκουμε όλες τις αποστάσεις από το κάθε σημείο με το κάθε κέντρο στην συστάδα
    for i in labels:
        output[i]=np.amax(distances[i])
    return output
#######################################################################################################
data=safe_csv_read('source.csv')    # Μπορούσα να χρησιμοποιήσω pandas αλλά δεν με βόλευε ο τρόπος που διαβάζει τα csv
data.pop(0)                         # Αφαιρούμε τους τίτλους απο τα δεδομένα
cmap = { 0:'b',1:'y',2:'k',3:'g',4:'r' }    # Ένα color map
fig, axis=plt.subplots(2, 3)        # Φτιάχνει τα subplots για να εμφανιστούν οι απεικονήσεις. Μια θέση περισεύει. Δεν μας ζητήσατε σχήμα.
#######################################################################################################  1
x=[]
y=[]
for i in data:
    x.append(pd.to_numeric(i[dataset_attributes().Traveler_Age]))   #Εδώ απομονώνουμε τις στίλες με τις οποίες θέλουμε να κάνουμε τις συστάδες μας
    y.append(pd.to_numeric(i[dataset_attributes().Travel_Duration]))    # Απλά τις παίρνουμε μια μια και μετά τις βάζουμε στο subset

subset=np.array(list(zip(x,y)))

kmeans= KMeans(n_clusters=2, init='random', n_init='auto').fit(subset) # https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html
radii=get_cluster_radii(kmeans.cluster_centers_, kmeans.labels_, subset)        # Θέλουμε να έχουμε 2 clusters λόγω εκφώνησης, init="random" γιατί θέλουμε να είναι τυχαία τα αρχικά σημεία και δεν μας ενδιαφέρει.
                                                                                # Το n_init="auto" λέει πως θα γίνουν 10 επαναλήψεις σύμφωνα με τα docs

j=0
for i in kmeans.cluster_centers_:                                   # Είναι για τον κύκλο για να εμφανιστεί στο plot
    circle=plt.Circle(i, radii[j], color=cmap[j], fill=False)
    axis[0][0].add_patch(circle)
    j=j+1

axis[0][0].scatter(x,y, c=kmeans.labels_)   # Ανάθεση σε scatter subplot
print()
print("Traveler Age/Travel Duration")
print("The centroids of the 2 clusters are:")
print("{} {}".format(kmeans.cluster_centers_[0], kmeans.cluster_centers_[1]))
print("The radii are:")
print("{} {}".format(radii[0], radii[1]))
subsets=split_data(data, kmeans.cluster_centers_, kmeans.labels_)

total=0
for i in data:              # Τα data, subsets και subsetss (παρακάτω) είναι λίστες και δεν υπάρχει έτοιμη συνάρτηση για να δούμε το μέγεθός τους
    total=total+1
cluster1=0
for i in subsets[0]:
    cluster1=cluster1+1 # need to make a pink floyd refference here
cluster2=0
for i in subsets[1]:
    cluster2=cluster2+1
print("And the clusters have {} and {} data points out of the {} total points respectively".format(cluster1, cluster2, total))
print()
print("----------------------------------------------------------------------------------------")
#######################################################################################################  2

x=[]
y=[]
for i in subsets[0]:        #Στην ουσία το ίδιο με το πρώτο αλλά με τα στοιχεία της πρώτης συστάδας
    x.append(pd.to_numeric(i[dataset_attributes().Accomodation_Cost]))
    y.append(pd.to_numeric(i[dataset_attributes().Travel_Duration]))

subset=np.array(list(zip(x,y)))

kmeans= KMeans(n_clusters=2, init='random', n_init='auto' ).fit(subset)
radii=get_cluster_radii(kmeans.cluster_centers_, kmeans.labels_, subset)

j=0
for i in kmeans.cluster_centers_:
    circle=plt.Circle(i, radii[j], color=cmap[j], fill=False)
    axis[0][1].add_patch(circle)
    j=j+1

axis[0][1].scatter(x,y, c=kmeans.labels_)

print()
print("From cluster 1:")
print()
print("Accomodation Cost/Travel Duration")
print("The centroids of the 2 clusters are:")
print("{} {}".format(kmeans.cluster_centers_[0], kmeans.cluster_centers_[1]))
print("The radii are:")
print("{} {}".format(radii[0], radii[1]))
subsetss=split_data(subsets[0], kmeans.cluster_centers_, kmeans.labels_)

total=0
for i in subsets[0]:
    total=total+1
cluster1=0
for i in subsetss[0]:
    cluster1=cluster1+1
cluster2=0
for i in subsetss[1]:
    cluster2=cluster2+1
print("And the clusters have {} and {} data points out of the {} total points respectively".format(cluster1, cluster2, total))
print()
print("----------------------------------------------------------------------------------------")
#######################################################################################################  3

x=[]
y=[]
for i in subsets[0]:    #Στην ουσία το ίδιο με το πρώτο αλλά με τα στοιχεία της πρώτης συστάδας
    x.append(pd.to_numeric(i[dataset_attributes().Transportation_Cost]))
    y.append(pd.to_numeric(i[dataset_attributes().Travel_Duration]))
subset=np.array(list(zip(x,y)))

kmeans= KMeans(n_clusters=2, init='random', n_init='auto' ).fit(subset)

j=0
for i in kmeans.cluster_centers_:
    circle=plt.Circle(i, radii[j], color=cmap[j], fill=False)
    axis[0][2].add_patch(circle)
    j=j+1

axis[0][2].scatter(x,y, c=kmeans.labels_)

print()
print("From cluster 1:")
print()
print("Transportation Cost/Travel Duration")
print("The centroids of the 2 clusters are:")
print("{} {}".format(kmeans.cluster_centers_[0], kmeans.cluster_centers_[1]))
print("The radii are:")
print("{} {}".format(radii[0], radii[1]))
subsetss=split_data(subsets[0], kmeans.cluster_centers_, kmeans.labels_)

total=0
for i in subsets[0]:
    total=total+1
cluster1=0
for i in subsetss[0]:
    cluster1=cluster1+1
cluster2=0
for i in subsetss[1]:
    cluster2=cluster2+1
print("And the clusters have {} and {} data points out of the {} total points respectively".format(cluster1, cluster2, total))
print()
print("----------------------------------------------------------------------------------------")
#######################################################################################################  4
x=[]
y=[]
for i in subsets[1]:    #Στην ουσία το ίδιο με το πρώτο αλλά με τα στοιχεία της δεύτερης συστάδας
    y.append(pd.to_numeric(i[dataset_attributes().Traveler_Age]))
    x.append(pd.to_numeric(i[dataset_attributes().Accomodation_Cost]))

subset=np.array(list(zip(x,y)))

kmeans= KMeans(n_clusters=2, init='random', n_init='auto' ).fit(subset)
radii=get_cluster_radii(kmeans.cluster_centers_, kmeans.labels_, subset)

j=0
for i in kmeans.cluster_centers_:
    circle=plt.Circle(i, radii[j], color=cmap[j], fill=False)
    axis[1][0].add_patch(circle)
    j=j+1

axis[1][0].scatter(x,y, c=kmeans.labels_)

print()
print("From cluster 2:")
print()
print("Accomodation Cost/Traveler Age")
print("The centroids of the 2 clusters are:")
print("{} {}".format(kmeans.cluster_centers_[0], kmeans.cluster_centers_[1]))
print("The radii are:")
print("{} {}".format(radii[0], radii[1]))
subsetss=split_data(subsets[1], kmeans.cluster_centers_, kmeans.labels_)

total=0
for i in subsets[1]:
    total=total+1
cluster1=0
for i in subsetss[0]:
    cluster1=cluster1+1
cluster2=0
for i in subsetss[1]:
    cluster2=cluster2+1
print("And the clusters have {} and {} data points out of the {} total points respectively".format(cluster1, cluster2, total))
print()
print("----------------------------------------------------------------------------------------")
#######################################################################################################  5
x=[]
y=[]
for i in subsets[1]:    #Στην ουσία το ίδιο με το πρώτο αλλά με τα στοιχεία της δεύτερης συστάδας
    y.append(pd.to_numeric(i[dataset_attributes().Traveler_Age]))
    x.append(pd.to_numeric(i[dataset_attributes().Transportation_Cost]))

subset=np.array(list(zip(x,y)))

kmeans= KMeans(n_clusters=2, init='random', n_init='auto' ).fit(subset)
radii=get_cluster_radii(kmeans.cluster_centers_, kmeans.labels_, subset)

j=0
for i in kmeans.cluster_centers_:
    circle=plt.Circle(i, radii[j], color=cmap[j], fill=False)
    axis[1][1].add_patch(circle)
    j=j+1

axis[1][1].scatter(x,y, c=kmeans.labels_)

print()
print("From cluster 2:")
print()
print("Transfer Cost/Traveler Age")
print("The centroids of the 2 clusters are:")
print("{} {}".format(kmeans.cluster_centers_[0], kmeans.cluster_centers_[1]))
print("The radii are:")
print("{} {}".format(radii[0], radii[1]))
subsetss=split_data(subsets[1], kmeans.cluster_centers_, kmeans.labels_)

total=0
for i in subsets[1]:
    total=total+1
cluster1=0
for i in subsetss[0]:
    cluster1=cluster1+1
cluster2=0
for i in subsetss[1]:
    cluster2=cluster2+1
print("And the clusters have {} and {} data points out of the {} total points respectively".format(cluster1, cluster2, total))
print()
print("----------------------------------------------------------------------------------------")
#######################################################################################################
plt.show()

------------
Ερώτημα Γ.
Σύντομη Περιγραφή: 
    Ειναι ενας κωδικας, που δεχεται ενα dataset και το επεξεργαζεται και αποδιδει προβλεψεις βαση αναλογου δεντρου.
    
    Ο κωδικας ξεκινα φορτωνοντας την της βιβλιοθηκες pantas & sklearn. Μετα αποδιδει μοναδικο κλειδι 
    αναφερομενο ως name μεσα στο dataset και αναγνωριζουμε την θεση του math score μεσα στο dataset ως math_score.

    Επειτα αναθετει τις τιμες του dataset σε κλασεις-Βιβλιοθηκες και ετοιμαζει μια νεα κλαση την next math score για την προ-
    ετοιμασια του Δεντρου sklearn με την εντολη clf.

    Παρακατω τρεχει τα predictions μεσα απο καθε κλαση και τα επαναοργανωνει στις αντιστοιχες κλασεις.
    Εν τελει δινει τα αποτελεσματα και τις κλασεις.
Dataset: https://www.kaggle.com/datasets/spscientist/students-performance-in-exams?select=StudentsPerformance.csv (έχει μετονομαστεί σε exams.csv)
Κώδικας:
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# Load the dataset into a pandas dataframe
df = pd.read_csv('exams.csv')

# Print the original dataset
print("Original dataset:")
print(df)

# Add the unique variable
for index, row in df.iterrows():
    df.at[index, 'name'] = 'Student ' + str(index)

# Categorising the students into 4 classes 
class_Fail = {}
class_Fair = {}
class_Good = {}
class_Excellent = {}
#Adding a 'name' key for better data reading and setting the data take from math score
for index, row in df.iterrows():
    name = row['name']
    math_score = row['math score']
    #Classification of the dataset per score
    if (math_score < 50):
        class_Fail[name] = math_score
    elif (math_score == 50) | (math_score < 65):
        class_Fair[name] = math_score
    elif (math_score == 65) | (math_score < 85):
        class_Good[name] = math_score
    elif (math_score == 85) | (math_score <= 100):
        class_Excellent[name] = math_score
    else:
        print ("error math score value out of bounds")

# Make dataframe with the next math score for each student
next_math_score = df[['name', 'math score']].copy()
next_math_score['next math score'] = next_math_score['math score'].shift(-1)
next_math_score = next_math_score.dropna()

# Train the decision tree classifier to predict the next mark
X = next_math_score[['math score']]
Y = next_math_score['next math score']
clf = DecisionTreeClassifier()
clf.fit(X,Y)

# Predict the next math score for each student
predictions = {}
for name, score in class_Fail.items():
    predicted_score = clf.predict([[score]])[0]
    predictions[name] = predicted_score

for name, score in class_Fair.items():
    predicted_score = clf.predict([[score]])[0]
    predictions[name] = predicted_score

for name, score in class_Good.items():
    predicted_score = clf.predict([[score]])[0]
    predictions[name] = predicted_score

for name, score in class_Excellent.items():
    predicted_score = clf.predict([[score]])[0]
    predictions[name] = predicted_score

# Print the predictions for each student and classification by result
for name, predicted_score in predictions.items():
    if (predicted_score < 50):
        predicted_class="Fail"
    elif (predicted_score == 50) | (predicted_score < 65):
        predicted_class="Fair"
    elif (predicted_score == 65) | (predicted_score < 85):
        predicted_class="Good"
    elif (predicted_score == 85) | (predicted_score <= 100):
        predicted_class="Excellent"
    else:
        print ("error math score value out of bounds")
    print(f"{name}: Predicted next math score is {predicted_class}")
    

# Print the values for each class
print("Values for each class:")
print(f"Fail: {class_Fail}")
print(f"Fair: {class_Fair}")
print(f"Good: {class_Good}")
print(f"Excellent: {class_Excellent}")

--------------------------------------------- Τέλος περιεχομένων του αρχείου txt -----------------------------------------------------
